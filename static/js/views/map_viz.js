// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['backbone', 'libs/utils', 'libs/mapper', 'text!templates/map_viz.html'], function(Backbone, utils, mapper, template) {
  'use strict';

  var MapViz;
  return MapViz = (function(_super) {

    __extends(MapViz, _super);

    function MapViz() {
      return MapViz.__super__.constructor.apply(this, arguments);
    }

    MapViz.prototype.el = "#map_viz";

    MapViz.prototype.initialize = function(options) {
      this.model = options.model;
      this.world_geo = options.world_geo;
      this.cities_dataset = options.cities_dataset;
      this.map = mapper();
      this.map.el(this.el);
      this.map.data({
        base: this.world_geo,
        overlay: this.cities_dataset
      });
      this.map.width(this.$el.innerWidth());
      this.map.height(utils.getMiddleHeight());
      return this.render();
    };

    MapViz.prototype.render = function() {
      var _this = this;
      this.map(this.model.get("country"));
      this.model.on('change:country', function(model, country) {
        _this.updateChartCountry(country);
        return _this.zoomToCountry(country);
      });
      return this.model.on('change:year', function(model, year) {
        return _this.updateChartYear(year);
      });
    };

    MapViz.prototype.zoomToCountry = function(country) {
      return this.map.zoomToCountry(country);
    };

    MapViz.prototype.updateChartCountry = function(country) {
      return this.map.renderOverlay(country);
    };

    MapViz.prototype.updateChartYear = function(year) {
      return this.map.updateOverlay(year);
    };

    return MapViz;

  })(Backbone.View);
});
