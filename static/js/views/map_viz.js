// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['backbone', 'libs/utils', 'libs/mapper', 'text!templates/map_viz.html'], function(Backbone, utils, mapper, template) {
  'use strict';

  var MapViz;
  return MapViz = (function(_super) {

    __extends(MapViz, _super);

    function MapViz() {
      return MapViz.__super__.constructor.apply(this, arguments);
    }

    MapViz.prototype.el = "#map_viz";

    MapViz.prototype.initialize = function(options) {
      this.rendered = false;
      this.model = options.model;
      this.world_geo = options.world_geo;
      return this.cities_dataset = options.cities_dataset;
    };

    MapViz.prototype.render = function() {
      var country, year;
      if (!this.rendered) {
        this.map = mapper();
        this.map.el(this.el);
        this.map.data({
          base: this.world_geo,
          overlay: this.cities_dataset
        });
        this.map.width(this.$el.innerWidth());
        this.map.height(utils.getMiddleHeight());
        this.map(this.model.get("country"));
        return this.rendered = true;
      } else {
        country = this.model.get("country");
        year = this.model.get("year");
        if (country) {
          this.zoomToCountry(country);
        }
        if (year) {
          return this.updateChart(year);
        }
      }
    };

    MapViz.prototype.updateChart = function(year) {
      return this.map.updateOverlay(year);
    };

    MapViz.prototype.zoomToCountry = function(country) {
      var _ref;
      console.log("MapViz:zoomToCountry", this.model.get("country"));
      return (_ref = this.map) != null ? _ref.zoomToCountry(country) : void 0;
    };

    return MapViz;

  })(Backbone.View);
});
