// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['backbone', 'libs/utils', 'text!templates/world_map.html'], function(Backbone, utils, template) {
  'use strict';

  var Base;
  return Base = (function(_super) {

    __extends(Base, _super);

    function Base() {
      return Base.__super__.constructor.apply(this, arguments);
    }

    Base.prototype.initialize = function(options) {
      this.options = options || {};
      this.dispatcher = options.dispatcher;
      return this.gevents = [];
    };

    Base.prototype.bindTo = function(model, ev, callback) {
      model.bind(ev, callback, this);
      if (this.bindings == null) {
        this.bindings = [];
      }
      return this.bindings.push({
        model: model,
        ev: ev,
        callback: callback
      });
    };

    Base.prototype.unbindFromAll = function() {
      if (this.bindings) {
        _.each(this.bindings, function(binding) {
          return binding.model.unbind(binding.ev, binding.callback);
        });
      }
      return this.bindings = [];
    };

    Base.prototype.gsubscribe = function(ev, callback, context) {
      if (context == null) {
        context = this;
      }
      this.gevents.push({
        e: ev,
        callback: callback
      });
      return this.dispatcher.on(ev, callback, context);
    };

    Base.prototype.gunsubscribeFromAll = function() {
      var ev, _i, _len, _ref, _results;
      _ref = this.gevents;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ev = _ref[_i];
        _results.push(this.dispatcher.off(ev.e, ev.callback));
      }
      return _results;
    };

    Base.prototype.dispose = function() {
      var prop, properties, _i, _len, _results;
      this.gunsubscribeFromAll();
      this.unbindFromAll();
      this.off();
      $(this.el).children().remove();
      $(this.el).hide();
      properties = ['el', '$el', 'options', 'model', 'collection', 'subviews', 'subviewsByName', '_callbacks', 'map'];
      _results = [];
      for (_i = 0, _len = properties.length; _i < _len; _i++) {
        prop = properties[_i];
        _results.push(delete this[prop]);
      }
      return _results;
    };

    Base.prototype._getViewDimensions = function() {
      return {
        height: utils.getMiddleHeight(),
        width: $(this.el).innerWidth()
      };
    };

    return Base;

  })(Backbone.View);
});
