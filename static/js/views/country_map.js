// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['backbone', 'views/base', 'libs/mapper', 'text!templates/country_map.html'], function(Backbone, Base, mapper, template) {
  'use strict';

  var CountryMap;
  return CountryMap = (function(_super) {

    __extends(CountryMap, _super);

    function CountryMap() {
      return CountryMap.__super__.constructor.apply(this, arguments);
    }

    CountryMap.prototype.el = "#country_map";

    CountryMap.prototype.initialize = function(options) {
      CountryMap.__super__.initialize.call(this, options);
      this.defaultMessage = "Country Map (main visualisation)";
      return this.message = this.options.message || this.defaultMessage;
    };

    CountryMap.prototype.render = function(args) {
      var country_code, country_ds, dimensions, ds, height, width, wr;
      this.gsubscribe('onSlide', this.updateChart, this);
      wr = args[1][0];
      ds = args[0];
      country_code = args[2];
      country_ds = ds.where({
        rows: function(row) {
          return row["iso_a2"] === country_code;
        }
      });
      dimensions = this._getViewDimensions();
      width = dimensions.width;
      height = dimensions.height;
      this.map = mapper();
      this.map.el(this.el);
      this.map.country(country_code);
      this.map.data({
        base: wr,
        overlay: country_ds
      });
      this.map.width(width);
      this.map.height(height);
      return this.map();
    };

    CountryMap.prototype.updateChart = function(year) {
      return this.map.updateOverlay(year);
    };

    return CountryMap;

  })(Base);
});
